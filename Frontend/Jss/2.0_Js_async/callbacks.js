function display(process,name){     // in arrow format  ///// let or const display=(process,name) => process(name)) ///////
    return process(name)           //used return in all function coz used console.log to call those funct 
}                                  // or else wwe cado it in arrow funct like in the above 1st line comments 


function greets(name){
    return ("Hey Good eve! "+name)
     
}

function talks(name){
    return ("How was your day today? ")  //+nmae will show the name "karthik"
/*
-->if widout display (callback function) means the calllback will be here in talks() like
callback() or a param with it like process (name) that too coz return keyword

-->then the name value goes back to the arg process (the process name is user defined)

-->then the name value(name) got shared by the function marked process here but called as greet() or talk() down there

-->then coz of return the funct call wrapped inside console.log


*/
   
}

console.log(display(greets,"Karthik"))    //greeets goes like process and takes 
console.log(display(talks,"Karthik"))     //if talk() and greet() built with console.log means here there is no need


/*
-----basically here this is the syntax------

function mainFunction(args..., callback) {
  // ...do something
  callback(result);   // invoke the callback
}

mainFunction(data..., callbackFn);

*/



/*
-----callback function without any main or extra function-----
function greets(name, age, city) {
  console.log("Hey " +name+ " You are "+age+ " and living in "+city);        //If the values must change every time → pass them in the function call.
}                                                                            //If the values are always same → define inside the function.
function talks(callback, nme, no) {                                          //If it’s a combination → mix both (caller + inside function).
  console.log("Hybrid conversation...");                                    
  let city = "Chennai";  // fixed inside
  callback(nme, no, city); // mix dynamic + fixed
}

// caller gives name & age, function adds city
talks(greets, "Karthick", 28);
talks(greets, "Arun", 22);
*/





/*
-----explanation again with arrow function-----

function computeSum(a, b, callback) {
  
const result = a + b;             // (2) does some operation
  callback(result);               // (3) dummy name of funct invoking (callback) wid the result as answer and 
                                    this answer stored in showresult
}

function showResult(value) {      // (4) then result will be executed
  console.log("Sum is:", value);  // we can neglect this funct showresult and use a arrow function like in (5)           
}

computeSum(5, 7, showResult);      // (1) we are calling a funct inside another funct
(5) computeSum(5, 7,showresult(value)=>console.log("Sum is:", value))  this also does the job

*/          
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































